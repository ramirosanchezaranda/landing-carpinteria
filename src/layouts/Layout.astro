---
// Importaciones de estilos y dependencias globales
import '../styles/globals.css';
import 'tailwindcss/tailwind.css';
import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination'; 
import Loader from '../components/Loader.astro';

// Definición de propiedades para el Layout
interface Props {
    title: string;
    description?: string;
    keywords?: string;
}

// Destructuración de propiedades con valores por defecto
const { 
    title = 'LCA Carpintería', 
    description = 'Servicios profesionales de carpintería artesanal', 
    keywords = 'carpintería, muebles, diseño, artesanal' 
} = Astro.props;
---

<!doctype html>
<html lang="es">
    <head>
        {/* Metadatos y configuraciones principales del documento */}
        <meta charset="UTF-8" />
        <meta name="description" content={description} />
        <meta name="viewport" content="width=device-width" />
        
        {/* Favicon y recursos estáticos */}
        <link rel="icon" type="image/png" href="/LCA.png">
        <link rel="apple-touch-icon" href="/LCA.png">
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        
        {/* Optimización de carga de fuentes */}
        <link rel="preconnect" href="https://api.fontshare.com">
        <link 
            rel="stylesheet" 
            href="https://api.fontshare.com/v2/css?f[]=satoshi@0,1,700,701,400,401,500,501&display=swap" 
            media="print" 
            onload="this.media='all'"
        />
        <noscript>
            <link 
                rel="stylesheet" 
                href="https://api.fontshare.com/v2/css?f[]=satoshi@0,1,700,701,400,401,500,501&display=swap"
            />
        </noscript>
        
        {/* Estrategia de font-display */}
        <style>
            @font-face {
                font-family: 'Satoshi';
                src: url('https://api.fontshare.com/v2/css?f[]=satoshi@0,1,700,701,400,401,500,501&display=swap') format('woff2');
                font-weight: 400 700;
                font-display: swap;
                font-style: normal;
            }
        </style>
        
        {/* Preconexiones y recursos externos */}
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.css" />
        
        {/* Estilos para Swiper */}
        <style>
            .swiper {
                width: 100%;
                height: 400px;
            }
            .swiper-slide {
                display: flex;
                justify-content: center;
                align-items: center;
            }
            .swiper-slide img {
                max-width: 100%;
                max-height: 100%;
                object-fit: cover;
            }
        </style>
        
        <title>{title}</title>
        
        {/* Coolors Palette Widget */}
        <script src="https://coolors.co/palette-widget/widget.js"></script>
        <script data-id="05786209326339431">new CoolorsPaletteWidget("05786209326339431", ["0b090a","161a1d","660708","a4161a","ba181b","e5383b","b1a7a6","d3d3d3","f5f3f4","ffffff"]); </script>
        
        {/* Librerías de animación */}
        <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/ScrollTrigger.min.js"></script>
        
        {/* Librerías de animación con inicialización segura */}
        <script is:inline>
            // Inicialización segura de GSAP y ScrollTrigger
            window.addEventListener('load', () => {
                if (window.gsap && window.ScrollTrigger) {
                    window.gsap.registerPlugin(window.ScrollTrigger);
                }
            });
        </script>
    </head>
    
    <body class="bg-white_smoke-500 backdrop-blur-xl text-eerie_black-500 min-h-screen font-sans">
        <Loader />       
        {/* Slot para contenido dinámico de páginas */}
        <slot />                
        

        {/* Carga de scripts externos */}
        <script src="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.js"></script>
        
        {/* Script para inicialización segura de Swiper */}
        <script is:inline>
            document.addEventListener('DOMContentLoaded', () => {
                const swiperElements = document.querySelectorAll('.swiper');
                
                swiperElements.forEach(swiperEl => {
                    const slides = swiperEl.querySelectorAll('.swiper-slide');
                    
                    // Si hay pocos slides, ajustar configuración
                    if (slides.length < 3) {
                        const swiperInstance = new Swiper(swiperEl, {
                            slidesPerView: 1,
                            spaceBetween: 10,
                            loop: false, // Deshabilitar loop si hay pocos slides
                            navigation: {
                                nextEl: '.swiper-button-next',
                                prevEl: '.swiper-button-prev',
                            },
                        });
                    }
                });
            });
        </script>
        
        {/* Script de carga dinámica de contenido */}
        <script is:inline>
            (function() {
                function initDynamicContentLoading() {
                    // Hacer visibles los elementos del hero inmediatamente
                    const heroElements = document.querySelectorAll('.hero-wrapper .fade-enter');
                    heroElements.forEach(element => {
                        element.classList.add('visible');
                    });

                    // Lazy loading de imágenes
                    const lazyImages = document.querySelectorAll('img.lazy-load');
                    
                    if ('IntersectionObserver' in window) {
                        const imageObserver = new IntersectionObserver((entries, observer) => {
                            entries.forEach(entry => {
                                if (entry.isIntersecting) {
                                    const img = entry.target;
                                    
                                    // Cargar imagen si tiene data-src
                                    if (img.dataset.src) {
                                        img.src = img.dataset.src;
                                        delete img.dataset.src;
                                    }
                                    
                                    // Añadir clase de carga
                                    img.classList.add('loaded');
                                    
                                    // Dejar de observar esta imagen
                                    observer.unobserve(img);
                                }
                            });
                        }, {
                            rootMargin: '50px 0px',
                            threshold: 0.01
                        });

                        lazyImages.forEach(img => imageObserver.observe(img));
                    }

                    // Revelar contenedores suaves
                    const smoothContainers = document.querySelectorAll('.smooth-container');
                    
                    if ('IntersectionObserver' in window) {
                        const containerObserver = new IntersectionObserver((entries) => {
                            entries.forEach(entry => {
                                if (entry.isIntersecting) {
                                    entry.target.classList.add('visible');
                                    
                                    // Hacer visibles los elementos fade-enter dentro del contenedor
                                    const fadeElements = entry.target.querySelectorAll('.fade-enter');
                                    fadeElements.forEach(el => el.classList.add('visible'));
                                }
                            });
                        }, {
                            threshold: 0.1
                        });

                        smoothContainers.forEach(container => containerObserver.observe(container));
                    }

                    // Detección de carga de fuentes
                    if ('fonts' in document) {
                        document.fonts.ready.then(() => {
                            // Añadir clase cuando las fuentes están cargadas
                            document.body.classList.add('fonts-loaded');
                        });
                    }
                }

                // Inicializar cuando el DOM esté listo
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', initDynamicContentLoading);
                } else {
                    initDynamicContentLoading();
                }

                // Performance monitoring
                if (window.performance) {
                    // Marca de inicio de carga de página
                    performance.mark('pageLoad-start');

                    window.addEventListener('load', () => {
                        // Marca de fin de carga de página
                        performance.mark('pageLoad-end');
                        performance.measure('pageLoad', 'pageLoad-start', 'pageLoad-end');
                        
                        const loadMeasure = performance.getEntriesByName('pageLoad')[0];
                        console.log(`🚀 Tiempo de carga: ${loadMeasure.duration.toFixed(2)}ms`);
                    });
                }
            })();
        </script>
        
        <style is:global>
            /* Scroll suave y elegante */
            html {
                scroll-behavior: smooth;
                scroll-padding-top: 4rem;
                overflow-x: hidden;
                max-width: 100%;
                margin: 0;
                padding: 0;
            }

            body {
                overflow-x: hidden;
                max-width: 100%;
                margin: 0;
                padding: 0;
            }

            /* Eliminar scroll horizontal en contenedores */
            .container {
                max-width: 100%;
                overflow-x: hidden;
                padding-left: 1rem;
                padding-right: 1rem;
            }

            /* Asegurar que las imágenes y elementos no generen scroll */
            img, video, iframe {
                max-width: 100%;
                height: auto;
            }
        </style>

        <style is:global>
            /* Scrollbar minimalista */
            ::-webkit-scrollbar {
                @apply w-1.5 bg-transparent;
            }
            ::-webkit-scrollbar-thumb {
                @apply bg-gray-300 rounded-full;
            }

            /* Efecto de revelación suave */
            .reveal {
                opacity: 1;
                transform: translateY(0);
            }

            .text-reveal {
                @apply opacity-100 translate-y-0;
            }

            /* Efecto de selección refinado */
            ::selection {
                @apply bg-gray-200 text-black bg-opacity-50;
            }
        </style>

        <style is:global>
            /* Estilos minimalistas */
            .elegant-transition {
                @apply duration-0;
            }
        </style>
    </body>
</html>

{/* Estilos globales para variables de color y fuentes */}
<style is:global>
    :root {
        --accent: 136, 58, 234;
        --accent-light: 224, 204, 250;
        --accent-dark: 49, 10, 101;
        --accent-gradient: linear-gradient(
            45deg,
            rgb(var(--accent)),
            rgb(var(--accent-light)) 30%,
            white 60%
        );
    }
    html {
        font-family: 'Satoshi', sans-serif;
    }
</style>